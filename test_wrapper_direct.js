#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –æ–±–µ—Ä—Ç–∫–∏ MCP —Å–µ—Ä–≤–µ—Ä–∞
 */

const { spawn } = require('child_process');

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –æ–±–µ—Ä—Ç–∫–∏ Puppeteer...\n');

const mcpProcess = spawn('node', ['./mcp-puppeteer-wrapper.js'], {
  stdio: ['pipe', 'pipe', 'pipe']
});

let hasInitialized = false;

mcpProcess.stdout.on('data', (data) => {
  const output = data.toString().trim();
  console.log('üì§ MCP Output:', output);
  
  // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ JSON –æ—Ç–≤–µ—Ç –æ—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞, –æ—Ç–ø—Ä–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
  if (output.includes('"jsonrpc"') && !hasInitialized) {
    hasInitialized = true;
    console.log('\nüöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
    
    const navigateCommand = JSON.stringify({
      jsonrpc: "2.0",
      id: 2,
      method: "tools/call",
      params: {
        name: "puppeteer_navigate",
        arguments: {
          url: "https://www.google.com"
        }
      }
    }) + '\n';
    
    mcpProcess.stdin.write(navigateCommand);
  }
});

mcpProcess.stderr.on('data', (data) => {
  console.log('üì§ MCP Stderr:', data.toString().trim());
});

mcpProcess.on('close', (code) => {
  console.log(`\nüîö MCP –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
  process.exit(code);
});

mcpProcess.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP:', error.message);
  process.exit(1);
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
setTimeout(() => {
  console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
  const initMessage = JSON.stringify({
    jsonrpc: "2.0",
    id: 1,
    method: "initialize",
    params: {
      protocolVersion: "2024-11-05",
      capabilities: {
        roots: {
          listChanged: true
        },
        sampling: {}
      },
      clientInfo: {
        name: "test-client",
        version: "1.0.0"
      }
    }
  }) + '\n';
  
  mcpProcess.stdin.write(initMessage);
}, 1000);

// –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  console.log('\n‚è∞ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  mcpProcess.kill('SIGTERM');
}, 15000); 