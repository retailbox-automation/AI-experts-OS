const puppeteer = require('puppeteer');
const path = require('path');

async function advancedPuppeteerTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ Puppeteer...');
  
  let browser;
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
    console.log('üì± –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
    browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-extensions',
        '--disable-gpu',
        '--disable-web-security'
      ]
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const page = await browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
    await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.setViewport({ width: 1920, height: 1080 });
    
    console.log('üéØ –¢–µ—Å—Ç 1: –ù–∞–≤–∏–≥–∞—Ü–∏—è –∏ –æ—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è');
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ example.com
    await page.goto('https://example.com', { 
      waitUntil: 'networkidle2',
      timeout: 30000 
    });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const title = await page.title();
    const url = page.url();
    console.log(`üìú –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}`);
    console.log(`üîó URL: ${url}`);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    const screenshot1Path = path.join(__dirname, 'advanced_test_1_example.png');
    await page.screenshot({ 
      path: screenshot1Path,
      fullPage: true 
    });
    console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${screenshot1Path}`);
    
    console.log('üéØ –¢–µ—Å—Ç 2: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏');
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const bodyText = await page.evaluate(() => document.body.innerText);
    console.log(`üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): ${bodyText.substring(0, 100)}...`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–æ–∫
    const links = await page.evaluate(() => {
      const linkElements = Array.from(document.querySelectorAll('a[href]'));
      return linkElements.map(link => ({
        text: link.innerText.trim(),
        href: link.href
      })).filter(link => link.text && link.href);
    });
    
    console.log(`üîó –ù–∞–π–¥–µ–Ω–æ ${links.length} —Å—Å—ã–ª–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ`);
    links.forEach((link, index) => {
      if (index < 3) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
        console.log(`   ${index + 1}. "${link.text}" -> ${link.href}`);
      }
    });
    
    console.log('üéØ –¢–µ—Å—Ç 3: JavaScript –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    // –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageInfo = await page.evaluate(() => {
      return {
        userAgent: navigator.userAgent,
        language: navigator.language,
        cookieEnabled: navigator.cookieEnabled,
        onlineStatus: navigator.onLine,
        screenResolution: `${screen.width}x${screen.height}`,
        windowSize: `${window.innerWidth}x${window.innerHeight}`,
        documentTitle: document.title,
        documentURL: document.URL,
        referrer: document.referrer || 'Direct',
        lastModified: document.lastModified,
        charset: document.characterSet,
        readyState: document.readyState
      };
    });
    
    console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞—É–∑–µ—Ä–µ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
    console.log(`   User Agent: ${pageInfo.userAgent}`);
    console.log(`   –Ø–∑—ã–∫: ${pageInfo.language}`);
    console.log(`   Cookies –≤–∫–ª—é—á–µ–Ω—ã: ${pageInfo.cookieEnabled}`);
    console.log(`   –û–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å: ${pageInfo.onlineStatus}`);
    console.log(`   –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞: ${pageInfo.screenResolution}`);
    console.log(`   –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: ${pageInfo.windowSize}`);
    console.log(`   –ö–æ–¥–∏—Ä–æ–≤–∫–∞: ${pageInfo.charset}`);
    console.log(`   –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${pageInfo.readyState}`);
    
    console.log('üéØ –¢–µ—Å—Ç 4: –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ä–º–∞–º–∏ (–Ω–∞ httpbin.org)');
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–æ—Ä–º–æ–π
    await page.goto('https://httpbin.org/forms/post', { 
      waitUntil: 'networkidle2',
      timeout: 30000 
    });
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    const emailInput = await page.$('input[name="email"]');
    const passwordInput = await page.$('input[name="password"]');
    
    if (emailInput && passwordInput) {
      await emailInput.type('test@example.com');
      await passwordInput.type('testpassword123');
      console.log('üìù –§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
      
      // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ñ–æ—Ä–º—ã
      const screenshot2Path = path.join(__dirname, 'advanced_test_2_form.png');
      await page.screenshot({ 
        path: screenshot2Path,
        fullPage: false 
      });
      console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${screenshot2Path}`);
    } else {
      console.log('‚ö†Ô∏è  –§–æ—Ä–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    console.log('üéØ –¢–µ—Å—Ç 5: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const startTime = Date.now();
    await page.goto('https://httpbin.org/delay/2', { 
      waitUntil: 'networkidle2',
      timeout: 30000 
    });
    const loadTime = Date.now() - startTime;
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π: ${loadTime}ms`);
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const metrics = await page.metrics();
    console.log('üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
    console.log(`   Timestamp: ${metrics.Timestamp}`);
    console.log(`   Documents: ${metrics.Documents}`);
    console.log(`   Frames: ${metrics.Frames}`);
    console.log(`   JSEventListeners: ${metrics.JSEventListeners}`);
    console.log(`   Nodes: ${metrics.Nodes}`);
    console.log(`   LayoutCount: ${metrics.LayoutCount}`);
    console.log(`   RecalcStyleCount: ${metrics.RecalcStyleCount}`);
    console.log(`   LayoutDuration: ${metrics.LayoutDuration}`);
    console.log(`   RecalcStyleDuration: ${metrics.RecalcStyleDuration}`);
    console.log(`   ScriptDuration: ${metrics.ScriptDuration}`);
    console.log(`   TaskDuration: ${metrics.TaskDuration}`);
    console.log(`   JSHeapUsedSize: ${Math.round(metrics.JSHeapUsedSize / 1024 / 1024)}MB`);
    console.log(`   JSHeapTotalSize: ${Math.round(metrics.JSHeapTotalSize / 1024 / 1024)}MB`);
    
    console.log('‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç Puppeteer –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    return {
      success: true,
      tests: {
        navigation: { title, url },
        links: links.length,
        pageInfo,
        loadTime,
        metrics: {
          heapUsedMB: Math.round(metrics.JSHeapUsedSize / 1024 / 1024),
          heapTotalMB: Math.round(metrics.JSHeapTotalSize / 1024 / 1024),
          documents: metrics.Documents,
          frames: metrics.Frames,
          nodes: metrics.Nodes
        }
      },
      message: '–í—Å–µ —Ç–µ—Å—Ç—ã Puppeteer –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!'
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error);
    return {
      success: false,
      error: error.message,
      message: '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª'
    };
  } finally {
    if (browser) {
      console.log('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...');
      await browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  advancedPuppeteerTest()
    .then(result => {
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:');
      console.log(JSON.stringify(result, null, 2));
      process.exit(result.success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = advancedPuppeteerTest; 