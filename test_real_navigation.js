#!/usr/bin/env node

/**
 * –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ Puppeteer —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º
 */

const { spawn } = require('child_process');

console.log('üîç –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç MCP —Å–µ—Ä–≤–µ—Ä–∞ Puppeteer...\n');

const mcpProcess = spawn('node', ['./mcp-puppeteer-wrapper.js'], {
  stdio: ['pipe', 'pipe', 'pipe']
});

let step = 0;
let responses = [];

mcpProcess.stdout.on('data', (data) => {
  const output = data.toString().trim();
  console.log(`üì§ Step ${step} Output:`, output);
  responses.push(output);
  
  try {
    const jsonResponse = JSON.parse(output);
    
    if (step === 0 && jsonResponse.result) {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–≤–∏–≥–∞—Ü–∏—è
      step = 1;
      console.log('\nüöÄ Step 1: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ Google...');
      
      const navigateCommand = JSON.stringify({
        jsonrpc: "2.0",
        id: 2,
        method: "tools/call",
        params: {
          name: "puppeteer_navigate",
          arguments: {
            url: "https://www.google.com"
          }
        }
      }) + '\n';
      
      mcpProcess.stdin.write(navigateCommand);
      
    } else if (step === 1 && jsonResponse.result) {
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Ç–µ–ø–µ—Ä—å —Å–∫—Ä–∏–Ω—à–æ—Ç
      step = 2;
      console.log('\nüì∏ Step 2: –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞...');
      
      const screenshotCommand = JSON.stringify({
        jsonrpc: "2.0",
        id: 3,
        method: "tools/call",
        params: {
          name: "puppeteer_screenshot",
          arguments: {
            name: "google_homepage_test",
            width: 1200,
            height: 800
          }
        }
      }) + '\n';
      
      mcpProcess.stdin.write(screenshotCommand);
      
    } else if (step === 2 && jsonResponse.result) {
      // –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ
      step = 3;
      console.log('\n‚úÖ Step 3: –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
      console.log('üéâ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ Puppeteer —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!');
      
      setTimeout(() => {
        mcpProcess.kill('SIGTERM');
      }, 2000);
    }
    
  } catch (e) {
    // –ù–µ JSON –æ—Ç–≤–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  }
});

mcpProcess.stderr.on('data', (data) => {
  console.log('üì§ MCP Stderr:', data.toString().trim());
});

mcpProcess.on('close', (code) => {
  console.log(`\nüîö –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
  
  if (step >= 2) {
    console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢: –£–°–ü–ï–®–ù–û!');
    console.log('- ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('- ‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É');
    console.log('- ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
    console.log('\nüéØ Puppeteer MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω –Ω–∞ macOS!');
  } else {
    console.log('\n‚ùå –†–ï–ó–£–õ–¨–¢–ê–¢: –ù–ï–ü–û–õ–ù–´–ô –¢–ï–°–¢');
    console.log(`–û—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ —à–∞–≥–µ: ${step}`);
  }
  
  process.exit(code);
});

mcpProcess.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP:', error.message);
  process.exit(1);
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
setTimeout(() => {
  console.log('üì® Step 0: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞...');
  const initMessage = JSON.stringify({
    jsonrpc: "2.0",
    id: 1,
    method: "initialize",
    params: {
      protocolVersion: "2024-11-05",
      capabilities: {
        roots: {
          listChanged: true
        },
        sampling: {}
      },
      clientInfo: {
        name: "real-test-client",
        version: "1.0.0"
      }
    }
  }) + '\n';
  
  mcpProcess.stdin.write(initMessage);
}, 1000);

// –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  console.log('\n‚è∞ –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (—Ç–∞–π–º–∞—É—Ç 30 —Å–µ–∫)...');
  mcpProcess.kill('SIGKILL');
}, 30000); 