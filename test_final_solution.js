#!/usr/bin/env node

/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞ Puppeteer
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
 */

const { spawn } = require('child_process');

console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ - –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ Puppeteer\n');

const mcpProcess = spawn('node', ['./mcp-puppeteer-wrapper-simple.js'], {
  stdio: ['pipe', 'pipe', 'pipe']
});

let step = 0;

mcpProcess.stdout.on('data', (data) => {
  const output = data.toString().trim();
  console.log(`üì§ MCP Output: ${output}`);
  
  try {
    const jsonResponse = JSON.parse(output);
    
    if (step === 0 && jsonResponse.result) {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
      step = 1;
      console.log('\n‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
      
      const navigateCommand = JSON.stringify({
        jsonrpc: "2.0",
        id: 2,
        method: "tools/call",
        params: {
          name: "puppeteer_navigate",
          arguments: {
            url: "https://www.google.com"
          }
        }
      }) + '\n';
      
      mcpProcess.stdin.write(navigateCommand);
      
    } else if (step === 1 && jsonResponse.result) {
      // –ù–∞–≤–∏–≥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
      step = 2;
      console.log('\n‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...');
      
      const screenshotCommand = JSON.stringify({
        jsonrpc: "2.0",
        id: 3,
        method: "tools/call",
        params: {
          name: "puppeteer_screenshot",
          arguments: {
            name: "final_test_screenshot",
            width: 1200,
            height: 800
          }
        }
      }) + '\n';
      
      mcpProcess.stdin.write(screenshotCommand);
      
    } else if (step === 2 && jsonResponse.result) {
      // –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω
      step = 3;
      console.log('\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ü–û–õ–ù–û–°–¢–¨–Æ –£–°–ü–ï–®–ï–ù!');
      console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–µ—Ä–≤–µ—Ä–∞');
      console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É');
      console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞');
      console.log('\nüöÄ –ü–†–û–°–¢–û–ï –†–ï–®–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!');
      
      setTimeout(() => {
        mcpProcess.kill('SIGTERM');
      }, 2000);
    }
    
  } catch (e) {
    // –ù–µ JSON –æ—Ç–≤–µ—Ç, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
  }
});

mcpProcess.stderr.on('data', (data) => {
  console.log(`üìä MCP Stderr: ${data.toString().trim()}`);
});

mcpProcess.on('close', (code) => {
  console.log(`\nüîö –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
  
  if (step >= 2) {
    console.log('\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢: –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –†–ê–ë–û–¢–ê–ï–¢!');
    console.log('üî• Puppeteer MCP —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ–Ω –Ω–∞ macOS M1!');
    console.log('üéØ –ü—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫!');
  } else {
    console.log('\n‚ö†Ô∏è –¢–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é');
  }
  
  process.exit(code);
});

mcpProcess.on('error', (error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP:', error.message);
  process.exit(1);
});

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
setTimeout(() => {
  console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é MCP —Å–µ—Ä–≤–µ—Ä–∞...');
  const initMessage = JSON.stringify({
    jsonrpc: "2.0",
    id: 1,
    method: "initialize",
    params: {
      protocolVersion: "2024-11-05",
      capabilities: {
        roots: {
          listChanged: true
        },
        sampling: {}
      },
      clientInfo: {
        name: "final-test-client",
        version: "1.0.0"
      }
    }
  }) + '\n';
  
  mcpProcess.stdin.write(initMessage);
}, 1000);

// –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
setTimeout(() => {
  console.log('\n‚è∞ –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ (30 —Å–µ–∫)...');
  mcpProcess.kill('SIGKILL');
}, 30000); 