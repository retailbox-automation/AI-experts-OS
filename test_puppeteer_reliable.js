const puppeteer = require('puppeteer');
const path = require('path');

async function reliablePuppeteerTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ Puppeteer...');
  
  let browser;
  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±—Ä–∞—É–∑–µ—Ä —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    console.log('üì± –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...');
    browser = await puppeteer.launch({
      headless: true,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--disable-dev-shm-usage',
        '--disable-extensions',
        '--disable-gpu',
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--no-zygote',
        '--disable-background-timer-throttling',
        '--disable-backgrounding-occluded-windows',
        '--disable-renderer-backgrounding',
        '--disable-background-networking',
        '--disable-ipc-flooding-protection',
        '--ignore-certificate-errors',
        '--ignore-ssl-errors',
        '--ignore-certificate-errors-spki-list',
        '--ignore-insecure-origins',
        '--disable-features=TranslateUI'
      ]
    });

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
    const page = await browser.newPage();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º User-Agent
    await page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.setViewport({ width: 1280, height: 720 });
    
    console.log('üéØ –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–∞—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const simpleHtml = `
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–¢–µ—Å—Ç Puppeteer</title>
        <style>
            body { 
                font-family: Arial, sans-serif; 
                padding: 20px; 
                background: linear-gradient(45deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
                margin: 0;
            }
            .container { 
                max-width: 800px; 
                margin: 0 auto; 
                text-align: center;
                background: rgba(255,255,255,0.1);
                padding: 40px;
                border-radius: 15px;
                backdrop-filter: blur(10px);
            }
            h1 { 
                color: #fff; 
                font-size: 2.5em;
                margin-bottom: 20px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            .info-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
                margin: 30px 0;
            }
            .info-card {
                background: rgba(255,255,255,0.1);
                padding: 20px;
                border-radius: 10px;
                border: 1px solid rgba(255,255,255,0.2);
            }
            button { 
                background: #4CAF50; 
                color: white; 
                padding: 15px 30px; 
                border: none; 
                border-radius: 5px; 
                cursor: pointer; 
                font-size: 16px;
                margin: 10px;
                transition: all 0.3s ease;
            }
            button:hover { 
                background: #45a049; 
                transform: translateY(-2px);
                box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            }
            #output { 
                margin-top: 20px; 
                padding: 15px; 
                background: rgba(255,255,255,0.1); 
                border-radius: 5px; 
                min-height: 50px;
            }
            input { 
                padding: 10px; 
                margin: 10px; 
                border: none; 
                border-radius: 5px; 
                font-size: 16px;
                background: rgba(255,255,255,0.9);
                color: #333;
            }
            .status { color: #4CAF50; font-weight: bold; }
            .timestamp { color: #FFD700; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ Puppeteer –¢–µ—Å—Ç –°—Ç—Ä–∞–Ω–∏—Ü–∞</h1>
            <p class="status">‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!</p>
            <p class="timestamp">–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏: <span id="loadTime"></span></p>
            
            <div class="info-grid">
                <div class="info-card">
                    <h3>üåê –ë—Ä–∞—É–∑–µ—Ä</h3>
                    <p id="userAgent">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                </div>
                <div class="info-card">
                    <h3>üì± –≠–∫—Ä–∞–Ω</h3>
                    <p id="screenInfo">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                </div>
                <div class="info-card">
                    <h3>üïí –í—Ä–µ–º—è</h3>
                    <p id="currentTime">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                </div>
                <div class="info-card">
                    <h3>üéØ –°–æ—Å—Ç–æ—è–Ω–∏–µ</h3>
                    <p id="pageState">–ó–∞–≥—Ä—É–∑–∫–∞...</p>
                </div>
            </div>
            
            <div>
                <input type="text" id="testInput" placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç">
                <button onclick="updateOutput()">–û–±–Ω–æ–≤–∏—Ç—å –≤—ã–≤–æ–¥</button>
                <button onclick="changeColor()">–ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç</button>
                <button onclick="showAlert()">–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª–µ—Ä—Ç</button>
            </div>
            
            <div id="output">
                <p>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è...</p>
            </div>
        </div>
        
        <script>
            function updateOutput() {
                const input = document.getElementById('testInput');
                const output = document.getElementById('output');
                output.innerHTML = '<p><strong>–í–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</strong> ' + (input.value || '–¢–µ–∫—Å—Ç –Ω–µ –≤–≤–µ–¥–µ–Ω') + '</p>';
            }
            
            function changeColor() {
                const colors = ['#667eea', '#f093fb', '#ffecd2', '#fcb69f', '#a8edea', '#fed6e3'];
                const randomColor = colors[Math.floor(Math.random() * colors.length)];
                document.body.style.background = 'linear-gradient(45deg, ' + randomColor + ' 0%, #764ba2 100%)';
                document.getElementById('output').innerHTML = '<p>üé® –¶–≤–µ—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ' + randomColor + '</p>';
            }
            
            function showAlert() {
                alert('Puppeteer —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! üéâ');
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            function updateInfo() {
                document.getElementById('loadTime').textContent = new Date().toLocaleString();
                document.getElementById('userAgent').textContent = navigator.userAgent.substring(0, 50) + '...';
                document.getElementById('screenInfo').textContent = screen.width + 'x' + screen.height + ' px';
                document.getElementById('currentTime').textContent = new Date().toLocaleTimeString();
                document.getElementById('pageState').textContent = document.readyState;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
            setInterval(() => {
                document.getElementById('currentTime').textContent = new Date().toLocaleTimeString();
            }, 1000);
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
            updateInfo();
        </script>
    </body>
    </html>
    `;
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await page.setContent(simpleHtml, { waitUntil: 'networkidle0' });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const title = await page.title();
    console.log(`üìú –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${title}`);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    const screenshot1Path = path.join(__dirname, 'reliable_test_1_local.png');
    await page.screenshot({ 
      path: screenshot1Path,
      fullPage: true 
    });
    console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç 1 —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${screenshot1Path}`);
    
    console.log('üéØ –¢–µ—Å—Ç 2: –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏');
    // –í–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ
    await page.type('#testInput', '–¢–µ—Å—Ç –æ—Ç Puppeteer! üöÄ');
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É
    await page.click('button[onclick="updateOutput()"]');
    
    // –ñ–¥–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º Promise.resolve —Å timeout –≤–º–µ—Å—Ç–æ page.waitForTimeout)
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–∞ output
    const outputText = await page.$eval('#output', el => el.textContent);
    console.log(`üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: ${outputText}`);
    
    // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç
    await page.click('button[onclick="changeColor()"]');
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
    const screenshot2Path = path.join(__dirname, 'reliable_test_2_interaction.png');
    await page.screenshot({ 
      path: screenshot2Path,
      fullPage: false 
    });
    console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç 2 —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${screenshot2Path}`);
    
    console.log('üéØ –¢–µ—Å—Ç 3: JavaScript –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ');
    // –í—ã–ø–æ–ª–Ω—è–µ–º JavaScript –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageInfo = await page.evaluate(() => {
      return {
        title: document.title,
        url: document.URL,
        userAgent: navigator.userAgent,
        language: navigator.language,
        cookieEnabled: navigator.cookieEnabled,
        onlineStatus: navigator.onLine,
        screenResolution: `${screen.width}x${screen.height}`,
        windowSize: `${window.innerWidth}x${window.innerHeight}`,
        timestamp: new Date().toISOString(),
        readyState: document.readyState,
        charset: document.characterSet,
        elementsCount: document.querySelectorAll('*').length,
        linksCount: document.querySelectorAll('a').length,
        buttonsCount: document.querySelectorAll('button').length,
        inputsCount: document.querySelectorAll('input').length
      };
    });
    
    console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ:');
    Object.entries(pageInfo).forEach(([key, value]) => {
      console.log(`   ${key}: ${value}`);
    });
    
    console.log('üéØ –¢–µ—Å—Ç 4: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const metrics = await page.metrics();
    console.log('üìà –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
    console.log(`   Documents: ${metrics.Documents}`);
    console.log(`   Frames: ${metrics.Frames}`);
    console.log(`   JSEventListeners: ${metrics.JSEventListeners}`);
    console.log(`   Nodes: ${metrics.Nodes}`);
    console.log(`   LayoutCount: ${metrics.LayoutCount}`);
    console.log(`   RecalcStyleCount: ${metrics.RecalcStyleCount}`);
    console.log(`   JSHeapUsedSize: ${Math.round(metrics.JSHeapUsedSize / 1024 / 1024)}MB`);
    console.log(`   JSHeapTotalSize: ${Math.round(metrics.JSHeapTotalSize / 1024 / 1024)}MB`);
    
    console.log('üéØ –¢–µ—Å—Ç 5: –ü–æ–ø—ã—Ç–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ (Google)');
    try {
      await page.goto('https://www.google.com', { 
        waitUntil: 'domcontentloaded',
        timeout: 10000 
      });
      const googleTitle = await page.title();
      console.log(`‚úÖ Google –∑–∞–≥—Ä—É–∂–µ–Ω: ${googleTitle}`);
      
      const screenshot3Path = path.join(__dirname, 'reliable_test_3_google.png');
      await page.screenshot({ 
        path: screenshot3Path,
        fullPage: false 
      });
      console.log(`‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç 3 —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${screenshot3Path}`);
    } catch (error) {
      console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Google: ${error.message}`);
    }
    
    console.log('‚úÖ –ù–∞–¥–µ–∂–Ω—ã–π —Ç–µ—Å—Ç Puppeteer –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    
    return {
      success: true,
      tests: {
        localPage: { title, outputText },
        pageInfo,
        metrics: {
          heapUsedMB: Math.round(metrics.JSHeapUsedSize / 1024 / 1024),
          heapTotalMB: Math.round(metrics.JSHeapTotalSize / 1024 / 1024),
          documents: metrics.Documents,
          frames: metrics.Frames,
          nodes: metrics.Nodes,
          elements: pageInfo.elementsCount
        }
      },
      screenshots: [
        'reliable_test_1_local.png',
        'reliable_test_2_interaction.png',
        'reliable_test_3_google.png'
      ],
      message: '–í—Å–µ —Ç–µ—Å—Ç—ã Puppeteer –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!'
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error);
    return {
      success: false,
      error: error.message,
      message: '–ù–∞–¥–µ–∂–Ω—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª'
    };
  } finally {
    if (browser) {
      console.log('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...');
      await browser.close();
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  reliablePuppeteerTest()
    .then(result => {
      console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–¥–µ–∂–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:');
      console.log(JSON.stringify(result, null, 2));
      process.exit(result.success ? 0 : 1);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = reliablePuppeteerTest; 