#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞ Puppeteer
 */

const { spawn } = require('child_process');
const fs = require('fs');
const yaml = require('js-yaml');

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ MCP —Å–µ—Ä–≤–µ—Ä–∞ Puppeteer...\n');

async function testMCPServer() {
  return new Promise((resolve, reject) => {
    console.log('1. –ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞ —á–µ—Ä–µ–∑ –æ–±–µ—Ä—Ç–∫—É...');
    
    const mcpProcess = spawn('node', ['./mcp-puppeteer-wrapper.js'], {
      stdio: ['pipe', 'pipe', 'pipe']
    });
    
    let stdout = '';
    let stderr = '';
    
    mcpProcess.stdout.on('data', (data) => {
      stdout += data.toString();
      console.log('üì§ Stdout:', data.toString().trim());
    });
    
    mcpProcess.stderr.on('data', (data) => {
      stderr += data.toString();
      console.log('üì§ Stderr:', data.toString().trim());
    });
    
    mcpProcess.on('close', (code) => {
      console.log(`üîö MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
      resolve({ code, stdout, stderr });
    });
    
    mcpProcess.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP —Å–µ—Ä–≤–µ—Ä–∞:', error.message);
      reject(error);
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    setTimeout(() => {
      console.log('2. –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...');
      const initMessage = JSON.stringify({
        jsonrpc: "2.0",
        id: 1,
        method: "initialize",
        params: {
          protocolVersion: "2024-11-05",
          capabilities: {
            roots: {
              listChanged: true
            },
            sampling: {}
          },
          clientInfo: {
            name: "test-client",
            version: "1.0.0"
          }
        }
      }) + '\n';
      
      mcpProcess.stdin.write(initMessage);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        console.log('3. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
        mcpProcess.kill('SIGTERM');
      }, 5000);
    }, 1000);
  });
}

async function runTests() {
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ librechat.yaml...');
    const yamlContent = fs.readFileSync('librechat.yaml', 'utf8');
    const config = yaml.load(yamlContent);
    
    if (config.mcpServers && config.mcpServers.puppeteer) {
      console.log('‚úÖ Puppeteer MCP —Å–µ—Ä–≤–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      console.log('   - Command:', config.mcpServers.puppeteer.command);
      console.log('   - Args:', config.mcpServers.puppeteer.args);
      console.log('   - Description:', config.mcpServers.puppeteer.description);
    } else {
      console.log('‚ùå Puppeteer MCP —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
      return;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    console.log('\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    const requiredFiles = [
      './mcp-puppeteer-wrapper.js',
      './node_modules/@modelcontextprotocol/server-puppeteer'
    ];
    
    for (const file of requiredFiles) {
      if (fs.existsSync(file)) {
        console.log(`‚úÖ ${file} –Ω–∞–π–¥–µ–Ω`);
      } else {
        console.log(`‚ùå ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return;
      }
    }
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º MCP —Å–µ—Ä–≤–µ—Ä
    console.log('\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞...');
    const result = await testMCPServer();
    
    if (result.stderr.includes('–ù–∞–π–¥–µ–Ω Chrome:')) {
      console.log('‚úÖ Chrome –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }
    
    if (result.stderr.includes('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Puppeteer –ø—Ä–∏–º–µ–Ω–µ–Ω—ã')) {
      console.log('‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Puppeteer –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    }
    
    if (result.stderr.includes('–ó–∞–ø—É—Å–∫ MCP —Å–µ—Ä–≤–µ—Ä–∞:')) {
      console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –°—Ç–∞—Ç—É—Å:');
    console.log('‚úÖ Puppeteer –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è macOS');
    console.log('‚úÖ MCP —Å–µ—Ä–≤–µ—Ä –∏—Å–ø—Ä–∞–≤–ª–µ–Ω');
    console.log('‚úÖ Chrome –Ω–∞–π–¥–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run backend:dev');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ frontend: npm run frontend:dev');
    console.log('3. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä');
    console.log('4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: "–°–¥–µ–ª–∞–π —Å–∫—Ä–∏–Ω—à–æ—Ç google.com"');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    console.log('\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º');
    console.log('3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Chrome —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests(); 